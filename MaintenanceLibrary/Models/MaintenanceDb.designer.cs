#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MaintenanceLibrary.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MaintenanceDb")]
	public partial class MaintenanceDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertBrakeFacts(BrakeFacts instance);
    partial void UpdateBrakeFacts(BrakeFacts instance);
    partial void DeleteBrakeFacts(BrakeFacts instance);
    partial void InsertWorkers(Workers instance);
    partial void UpdateWorkers(Workers instance);
    partial void DeleteWorkers(Workers instance);
    partial void InsertBrandModels(BrandModels instance);
    partial void UpdateBrandModels(BrandModels instance);
    partial void DeleteBrandModels(BrandModels instance);
    partial void InsertCars(Cars instance);
    partial void UpdateCars(Cars instance);
    partial void DeleteCars(Cars instance);
    partial void InsertClients(Clients instance);
    partial void UpdateClients(Clients instance);
    partial void DeleteClients(Clients instance);
    partial void InsertColors(Colors instance);
    partial void UpdateColors(Colors instance);
    partial void DeleteColors(Colors instance);
    partial void InsertMalfunctions(Malfunctions instance);
    partial void UpdateMalfunctions(Malfunctions instance);
    partial void DeleteMalfunctions(Malfunctions instance);
    partial void InsertPersons(Persons instance);
    partial void UpdatePersons(Persons instance);
    partial void DeletePersons(Persons instance);
    partial void InsertRepairFacts(RepairFacts instance);
    partial void UpdateRepairFacts(RepairFacts instance);
    partial void DeleteRepairFacts(RepairFacts instance);
    partial void InsertServices(Services instance);
    partial void UpdateServices(Services instance);
    partial void DeleteServices(Services instance);
    partial void InsertSpecialties(Specialties instance);
    partial void UpdateSpecialties(Specialties instance);
    partial void DeleteSpecialties(Specialties instance);
    #endregion
		
		public MaintenanceDbDataContext() : 
				base(global::MaintenanceLibrary.Properties.Settings.Default.MaintenanceDbConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MaintenanceDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MaintenanceDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MaintenanceDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MaintenanceDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BrakeFacts> BrakeFacts
		{
			get
			{
				return this.GetTable<BrakeFacts>();
			}
		}
		
		public System.Data.Linq.Table<Workers> Workers
		{
			get
			{
				return this.GetTable<Workers>();
			}
		}
		
		public System.Data.Linq.Table<BrandModels> BrandModels
		{
			get
			{
				return this.GetTable<BrandModels>();
			}
		}
		
		public System.Data.Linq.Table<Cars> Cars
		{
			get
			{
				return this.GetTable<Cars>();
			}
		}
		
		public System.Data.Linq.Table<Clients> Clients
		{
			get
			{
				return this.GetTable<Clients>();
			}
		}
		
		public System.Data.Linq.Table<Colors> Colors
		{
			get
			{
				return this.GetTable<Colors>();
			}
		}
		
		public System.Data.Linq.Table<Malfunctions> Malfunctions
		{
			get
			{
				return this.GetTable<Malfunctions>();
			}
		}
		
		public System.Data.Linq.Table<Persons> Persons
		{
			get
			{
				return this.GetTable<Persons>();
			}
		}
		
		public System.Data.Linq.Table<RepairFacts> RepairFacts
		{
			get
			{
				return this.GetTable<RepairFacts>();
			}
		}
		
		public System.Data.Linq.Table<Services> Services
		{
			get
			{
				return this.GetTable<Services>();
			}
		}
		
		public System.Data.Linq.Table<Specialties> Specialties
		{
			get
			{
				return this.GetTable<Specialties>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BrakeFacts")]
	public partial class BrakeFacts : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdMalfunction;
		
		private int _IdWorker;
		
		private int _IdRepairFact;
		
		private int _IdService;
		
		private System.DateTime _DateTime;
		
		private EntityRef<Workers> _Workers;
		
		private EntityRef<Malfunctions> _Malfunctions;
		
		private EntityRef<RepairFacts> _RepairFacts;
		
		private EntityRef<Services> _Services;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdMalfunctionChanging(int value);
    partial void OnIdMalfunctionChanged();
    partial void OnIdWorkerChanging(int value);
    partial void OnIdWorkerChanged();
    partial void OnIdRepairFactChanging(int value);
    partial void OnIdRepairFactChanged();
    partial void OnIdServiceChanging(int value);
    partial void OnIdServiceChanged();
    partial void OnDateTimeChanging(System.DateTime value);
    partial void OnDateTimeChanged();
    #endregion
		
		public BrakeFacts()
		{
			this._Workers = default(EntityRef<Workers>);
			this._Malfunctions = default(EntityRef<Malfunctions>);
			this._RepairFacts = default(EntityRef<RepairFacts>);
			this._Services = default(EntityRef<Services>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdMalfunction", DbType="Int NOT NULL")]
		public int IdMalfunction
		{
			get
			{
				return this._IdMalfunction;
			}
			set
			{
				if ((this._IdMalfunction != value))
				{
					if (this._Malfunctions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdMalfunctionChanging(value);
					this.SendPropertyChanging();
					this._IdMalfunction = value;
					this.SendPropertyChanged("IdMalfunction");
					this.OnIdMalfunctionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdWorker", DbType="Int NOT NULL")]
		public int IdWorker
		{
			get
			{
				return this._IdWorker;
			}
			set
			{
				if ((this._IdWorker != value))
				{
					if (this._Workers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdWorkerChanging(value);
					this.SendPropertyChanging();
					this._IdWorker = value;
					this.SendPropertyChanged("IdWorker");
					this.OnIdWorkerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdRepairFact", DbType="Int NOT NULL")]
		public int IdRepairFact
		{
			get
			{
				return this._IdRepairFact;
			}
			set
			{
				if ((this._IdRepairFact != value))
				{
					if (this._RepairFacts.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdRepairFactChanging(value);
					this.SendPropertyChanging();
					this._IdRepairFact = value;
					this.SendPropertyChanged("IdRepairFact");
					this.OnIdRepairFactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdService", DbType="Int NOT NULL")]
		public int IdService
		{
			get
			{
				return this._IdService;
			}
			set
			{
				if ((this._IdService != value))
				{
					if (this._Services.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdServiceChanging(value);
					this.SendPropertyChanging();
					this._IdService = value;
					this.SendPropertyChanged("IdService");
					this.OnIdServiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTime", DbType="DateTime NOT NULL")]
		public System.DateTime DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this.OnDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DateTime = value;
					this.SendPropertyChanged("DateTime");
					this.OnDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Workers_BrakeFacts", Storage="_Workers", ThisKey="IdWorker", OtherKey="Id", IsForeignKey=true)]
		public Workers Workers
		{
			get
			{
				return this._Workers.Entity;
			}
			set
			{
				Workers previousValue = this._Workers.Entity;
				if (((previousValue != value) 
							|| (this._Workers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Workers.Entity = null;
						previousValue.BrakeFacts.Remove(this);
					}
					this._Workers.Entity = value;
					if ((value != null))
					{
						value.BrakeFacts.Add(this);
						this._IdWorker = value.Id;
					}
					else
					{
						this._IdWorker = default(int);
					}
					this.SendPropertyChanged("Workers");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Malfunctions_BrakeFacts", Storage="_Malfunctions", ThisKey="IdMalfunction", OtherKey="Id", IsForeignKey=true)]
		public Malfunctions Malfunctions
		{
			get
			{
				return this._Malfunctions.Entity;
			}
			set
			{
				Malfunctions previousValue = this._Malfunctions.Entity;
				if (((previousValue != value) 
							|| (this._Malfunctions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Malfunctions.Entity = null;
						previousValue.BrakeFacts.Remove(this);
					}
					this._Malfunctions.Entity = value;
					if ((value != null))
					{
						value.BrakeFacts.Add(this);
						this._IdMalfunction = value.Id;
					}
					else
					{
						this._IdMalfunction = default(int);
					}
					this.SendPropertyChanged("Malfunctions");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RepairFacts_BrakeFacts", Storage="_RepairFacts", ThisKey="IdRepairFact", OtherKey="Id", IsForeignKey=true)]
		public RepairFacts RepairFacts
		{
			get
			{
				return this._RepairFacts.Entity;
			}
			set
			{
				RepairFacts previousValue = this._RepairFacts.Entity;
				if (((previousValue != value) 
							|| (this._RepairFacts.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RepairFacts.Entity = null;
						previousValue.BrakeFacts.Remove(this);
					}
					this._RepairFacts.Entity = value;
					if ((value != null))
					{
						value.BrakeFacts.Add(this);
						this._IdRepairFact = value.Id;
					}
					else
					{
						this._IdRepairFact = default(int);
					}
					this.SendPropertyChanged("RepairFacts");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Services_BrakeFacts", Storage="_Services", ThisKey="IdService", OtherKey="Id", IsForeignKey=true)]
		public Services Services
		{
			get
			{
				return this._Services.Entity;
			}
			set
			{
				Services previousValue = this._Services.Entity;
				if (((previousValue != value) 
							|| (this._Services.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Services.Entity = null;
						previousValue.BrakeFacts.Remove(this);
					}
					this._Services.Entity = value;
					if ((value != null))
					{
						value.BrakeFacts.Add(this);
						this._IdService = value.Id;
					}
					else
					{
						this._IdService = default(int);
					}
					this.SendPropertyChanged("Services");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Workers")]
	public partial class Workers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdPerson;
		
		private int _IdSpecialty;
		
		private string _Category;
		
		private double _Salary;
		
		private int _WorkExperience;
		
		private bool _IsDismissed;
		
		private EntitySet<BrakeFacts> _BrakeFacts;
		
		private EntityRef<Persons> _Persons;
		
		private EntityRef<Specialties> _Specialties;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdPersonChanging(int value);
    partial void OnIdPersonChanged();
    partial void OnIdSpecialtyChanging(int value);
    partial void OnIdSpecialtyChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnSalaryChanging(double value);
    partial void OnSalaryChanged();
    partial void OnWorkExperienceChanging(int value);
    partial void OnWorkExperienceChanged();
    partial void OnIsDismissedChanging(bool value);
    partial void OnIsDismissedChanged();
    #endregion
		
		public Workers()
		{
			this._BrakeFacts = new EntitySet<BrakeFacts>(new Action<BrakeFacts>(this.attach_BrakeFacts), new Action<BrakeFacts>(this.detach_BrakeFacts));
			this._Persons = default(EntityRef<Persons>);
			this._Specialties = default(EntityRef<Specialties>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPerson", DbType="Int NOT NULL")]
		public int IdPerson
		{
			get
			{
				return this._IdPerson;
			}
			set
			{
				if ((this._IdPerson != value))
				{
					if (this._Persons.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPersonChanging(value);
					this.SendPropertyChanging();
					this._IdPerson = value;
					this.SendPropertyChanged("IdPerson");
					this.OnIdPersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdSpecialty", DbType="Int NOT NULL")]
		public int IdSpecialty
		{
			get
			{
				return this._IdSpecialty;
			}
			set
			{
				if ((this._IdSpecialty != value))
				{
					if (this._Specialties.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdSpecialtyChanging(value);
					this.SendPropertyChanging();
					this._IdSpecialty = value;
					this.SendPropertyChanged("IdSpecialty");
					this.OnIdSpecialtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salary", DbType="Float NOT NULL")]
		public double Salary
		{
			get
			{
				return this._Salary;
			}
			set
			{
				if ((this._Salary != value))
				{
					this.OnSalaryChanging(value);
					this.SendPropertyChanging();
					this._Salary = value;
					this.SendPropertyChanged("Salary");
					this.OnSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkExperience", DbType="Int NOT NULL")]
		public int WorkExperience
		{
			get
			{
				return this._WorkExperience;
			}
			set
			{
				if ((this._WorkExperience != value))
				{
					this.OnWorkExperienceChanging(value);
					this.SendPropertyChanging();
					this._WorkExperience = value;
					this.SendPropertyChanged("WorkExperience");
					this.OnWorkExperienceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDismissed", DbType="Bit NOT NULL")]
		public bool IsDismissed
		{
			get
			{
				return this._IsDismissed;
			}
			set
			{
				if ((this._IsDismissed != value))
				{
					this.OnIsDismissedChanging(value);
					this.SendPropertyChanging();
					this._IsDismissed = value;
					this.SendPropertyChanged("IsDismissed");
					this.OnIsDismissedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Workers_BrakeFacts", Storage="_BrakeFacts", ThisKey="Id", OtherKey="IdWorker")]
		public EntitySet<BrakeFacts> BrakeFacts
		{
			get
			{
				return this._BrakeFacts;
			}
			set
			{
				this._BrakeFacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Persons_Workers", Storage="_Persons", ThisKey="IdPerson", OtherKey="Id", IsForeignKey=true)]
		public Persons Persons
		{
			get
			{
				return this._Persons.Entity;
			}
			set
			{
				Persons previousValue = this._Persons.Entity;
				if (((previousValue != value) 
							|| (this._Persons.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Persons.Entity = null;
						previousValue.Workers.Remove(this);
					}
					this._Persons.Entity = value;
					if ((value != null))
					{
						value.Workers.Add(this);
						this._IdPerson = value.Id;
					}
					else
					{
						this._IdPerson = default(int);
					}
					this.SendPropertyChanged("Persons");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Specialties_Workers", Storage="_Specialties", ThisKey="IdSpecialty", OtherKey="Id", IsForeignKey=true)]
		public Specialties Specialties
		{
			get
			{
				return this._Specialties.Entity;
			}
			set
			{
				Specialties previousValue = this._Specialties.Entity;
				if (((previousValue != value) 
							|| (this._Specialties.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Specialties.Entity = null;
						previousValue.Workers.Remove(this);
					}
					this._Specialties.Entity = value;
					if ((value != null))
					{
						value.Workers.Add(this);
						this._IdSpecialty = value.Id;
					}
					else
					{
						this._IdSpecialty = default(int);
					}
					this.SendPropertyChanged("Specialties");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BrakeFacts(BrakeFacts entity)
		{
			this.SendPropertyChanging();
			entity.Workers = this;
		}
		
		private void detach_BrakeFacts(BrakeFacts entity)
		{
			this.SendPropertyChanging();
			entity.Workers = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BrandModels")]
	public partial class BrandModels : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _BrandModel;
		
		private EntitySet<Cars> _Cars;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBrandModelChanging(string value);
    partial void OnBrandModelChanged();
    #endregion
		
		public BrandModels()
		{
			this._Cars = new EntitySet<Cars>(new Action<Cars>(this.attach_Cars), new Action<Cars>(this.detach_Cars));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrandModel", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string BrandModel
		{
			get
			{
				return this._BrandModel;
			}
			set
			{
				if ((this._BrandModel != value))
				{
					this.OnBrandModelChanging(value);
					this.SendPropertyChanging();
					this._BrandModel = value;
					this.SendPropertyChanged("BrandModel");
					this.OnBrandModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BrandModels_Cars", Storage="_Cars", ThisKey="Id", OtherKey="IdBrand")]
		public EntitySet<Cars> Cars
		{
			get
			{
				return this._Cars;
			}
			set
			{
				this._Cars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars(Cars entity)
		{
			this.SendPropertyChanging();
			entity.BrandModels = this;
		}
		
		private void detach_Cars(Cars entity)
		{
			this.SendPropertyChanging();
			entity.BrandModels = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cars")]
	public partial class Cars : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdBrand;
		
		private int _IdColor;
		
		private int _IdClient;
		
		private string _Plate;
		
		private int _YearManuf;
		
		private EntitySet<RepairFacts> _RepairFacts;
		
		private EntityRef<BrandModels> _BrandModels;
		
		private EntityRef<Clients> _Clients;
		
		private EntityRef<Colors> _Colors;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdBrandChanging(int value);
    partial void OnIdBrandChanged();
    partial void OnIdColorChanging(int value);
    partial void OnIdColorChanged();
    partial void OnIdClientChanging(int value);
    partial void OnIdClientChanged();
    partial void OnPlateChanging(string value);
    partial void OnPlateChanged();
    partial void OnYearManufChanging(int value);
    partial void OnYearManufChanged();
    #endregion
		
		public Cars()
		{
			this._RepairFacts = new EntitySet<RepairFacts>(new Action<RepairFacts>(this.attach_RepairFacts), new Action<RepairFacts>(this.detach_RepairFacts));
			this._BrandModels = default(EntityRef<BrandModels>);
			this._Clients = default(EntityRef<Clients>);
			this._Colors = default(EntityRef<Colors>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdBrand", DbType="Int NOT NULL")]
		public int IdBrand
		{
			get
			{
				return this._IdBrand;
			}
			set
			{
				if ((this._IdBrand != value))
				{
					if (this._BrandModels.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdBrandChanging(value);
					this.SendPropertyChanging();
					this._IdBrand = value;
					this.SendPropertyChanged("IdBrand");
					this.OnIdBrandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdColor", DbType="Int NOT NULL")]
		public int IdColor
		{
			get
			{
				return this._IdColor;
			}
			set
			{
				if ((this._IdColor != value))
				{
					if (this._Colors.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdColorChanging(value);
					this.SendPropertyChanging();
					this._IdColor = value;
					this.SendPropertyChanged("IdColor");
					this.OnIdColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdClient", DbType="Int NOT NULL")]
		public int IdClient
		{
			get
			{
				return this._IdClient;
			}
			set
			{
				if ((this._IdClient != value))
				{
					if (this._Clients.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdClientChanging(value);
					this.SendPropertyChanging();
					this._IdClient = value;
					this.SendPropertyChanged("IdClient");
					this.OnIdClientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Plate", DbType="NVarChar(12) NOT NULL", CanBeNull=false)]
		public string Plate
		{
			get
			{
				return this._Plate;
			}
			set
			{
				if ((this._Plate != value))
				{
					this.OnPlateChanging(value);
					this.SendPropertyChanging();
					this._Plate = value;
					this.SendPropertyChanged("Plate");
					this.OnPlateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearManuf", DbType="Int NOT NULL")]
		public int YearManuf
		{
			get
			{
				return this._YearManuf;
			}
			set
			{
				if ((this._YearManuf != value))
				{
					this.OnYearManufChanging(value);
					this.SendPropertyChanging();
					this._YearManuf = value;
					this.SendPropertyChanged("YearManuf");
					this.OnYearManufChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cars_RepairFacts", Storage="_RepairFacts", ThisKey="Id", OtherKey="IdCar")]
		public EntitySet<RepairFacts> RepairFacts
		{
			get
			{
				return this._RepairFacts;
			}
			set
			{
				this._RepairFacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BrandModels_Cars", Storage="_BrandModels", ThisKey="IdBrand", OtherKey="Id", IsForeignKey=true)]
		public BrandModels BrandModels
		{
			get
			{
				return this._BrandModels.Entity;
			}
			set
			{
				BrandModels previousValue = this._BrandModels.Entity;
				if (((previousValue != value) 
							|| (this._BrandModels.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BrandModels.Entity = null;
						previousValue.Cars.Remove(this);
					}
					this._BrandModels.Entity = value;
					if ((value != null))
					{
						value.Cars.Add(this);
						this._IdBrand = value.Id;
					}
					else
					{
						this._IdBrand = default(int);
					}
					this.SendPropertyChanged("BrandModels");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Clients_Cars", Storage="_Clients", ThisKey="IdClient", OtherKey="Id", IsForeignKey=true)]
		public Clients Clients
		{
			get
			{
				return this._Clients.Entity;
			}
			set
			{
				Clients previousValue = this._Clients.Entity;
				if (((previousValue != value) 
							|| (this._Clients.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Clients.Entity = null;
						previousValue.Cars.Remove(this);
					}
					this._Clients.Entity = value;
					if ((value != null))
					{
						value.Cars.Add(this);
						this._IdClient = value.Id;
					}
					else
					{
						this._IdClient = default(int);
					}
					this.SendPropertyChanged("Clients");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Colors_Cars", Storage="_Colors", ThisKey="IdColor", OtherKey="Id", IsForeignKey=true)]
		public Colors Colors
		{
			get
			{
				return this._Colors.Entity;
			}
			set
			{
				Colors previousValue = this._Colors.Entity;
				if (((previousValue != value) 
							|| (this._Colors.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Colors.Entity = null;
						previousValue.Cars.Remove(this);
					}
					this._Colors.Entity = value;
					if ((value != null))
					{
						value.Cars.Add(this);
						this._IdColor = value.Id;
					}
					else
					{
						this._IdColor = default(int);
					}
					this.SendPropertyChanged("Colors");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RepairFacts(RepairFacts entity)
		{
			this.SendPropertyChanging();
			entity.Cars = this;
		}
		
		private void detach_RepairFacts(RepairFacts entity)
		{
			this.SendPropertyChanging();
			entity.Cars = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Clients")]
	public partial class Clients : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdPerson;
		
		private System.DateTime _BornDate;
		
		private string _ResidencePermit;
		
		private EntitySet<Cars> _Cars;
		
		private EntitySet<RepairFacts> _RepairFacts;
		
		private EntityRef<Persons> _Persons;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdPersonChanging(int value);
    partial void OnIdPersonChanged();
    partial void OnBornDateChanging(System.DateTime value);
    partial void OnBornDateChanged();
    partial void OnResidencePermitChanging(string value);
    partial void OnResidencePermitChanged();
    #endregion
		
		public Clients()
		{
			this._Cars = new EntitySet<Cars>(new Action<Cars>(this.attach_Cars), new Action<Cars>(this.detach_Cars));
			this._RepairFacts = new EntitySet<RepairFacts>(new Action<RepairFacts>(this.attach_RepairFacts), new Action<RepairFacts>(this.detach_RepairFacts));
			this._Persons = default(EntityRef<Persons>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPerson", DbType="Int NOT NULL")]
		public int IdPerson
		{
			get
			{
				return this._IdPerson;
			}
			set
			{
				if ((this._IdPerson != value))
				{
					if (this._Persons.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPersonChanging(value);
					this.SendPropertyChanging();
					this._IdPerson = value;
					this.SendPropertyChanged("IdPerson");
					this.OnIdPersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BornDate", DbType="Date NOT NULL")]
		public System.DateTime BornDate
		{
			get
			{
				return this._BornDate;
			}
			set
			{
				if ((this._BornDate != value))
				{
					this.OnBornDateChanging(value);
					this.SendPropertyChanging();
					this._BornDate = value;
					this.SendPropertyChanged("BornDate");
					this.OnBornDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResidencePermit", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ResidencePermit
		{
			get
			{
				return this._ResidencePermit;
			}
			set
			{
				if ((this._ResidencePermit != value))
				{
					this.OnResidencePermitChanging(value);
					this.SendPropertyChanging();
					this._ResidencePermit = value;
					this.SendPropertyChanged("ResidencePermit");
					this.OnResidencePermitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Clients_Cars", Storage="_Cars", ThisKey="Id", OtherKey="IdClient")]
		public EntitySet<Cars> Cars
		{
			get
			{
				return this._Cars;
			}
			set
			{
				this._Cars.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Clients_RepairFacts", Storage="_RepairFacts", ThisKey="Id", OtherKey="IdClient")]
		public EntitySet<RepairFacts> RepairFacts
		{
			get
			{
				return this._RepairFacts;
			}
			set
			{
				this._RepairFacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Persons_Clients", Storage="_Persons", ThisKey="IdPerson", OtherKey="Id", IsForeignKey=true)]
		public Persons Persons
		{
			get
			{
				return this._Persons.Entity;
			}
			set
			{
				Persons previousValue = this._Persons.Entity;
				if (((previousValue != value) 
							|| (this._Persons.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Persons.Entity = null;
						previousValue.Clients.Remove(this);
					}
					this._Persons.Entity = value;
					if ((value != null))
					{
						value.Clients.Add(this);
						this._IdPerson = value.Id;
					}
					else
					{
						this._IdPerson = default(int);
					}
					this.SendPropertyChanged("Persons");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars(Cars entity)
		{
			this.SendPropertyChanging();
			entity.Clients = this;
		}
		
		private void detach_Cars(Cars entity)
		{
			this.SendPropertyChanging();
			entity.Clients = null;
		}
		
		private void attach_RepairFacts(RepairFacts entity)
		{
			this.SendPropertyChanging();
			entity.Clients = this;
		}
		
		private void detach_RepairFacts(RepairFacts entity)
		{
			this.SendPropertyChanging();
			entity.Clients = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Colors")]
	public partial class Colors : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Color;
		
		private EntitySet<Cars> _Cars;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    #endregion
		
		public Colors()
		{
			this._Cars = new EntitySet<Cars>(new Action<Cars>(this.attach_Cars), new Action<Cars>(this.detach_Cars));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Color", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Colors_Cars", Storage="_Cars", ThisKey="Id", OtherKey="IdColor")]
		public EntitySet<Cars> Cars
		{
			get
			{
				return this._Cars;
			}
			set
			{
				this._Cars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars(Cars entity)
		{
			this.SendPropertyChanging();
			entity.Colors = this;
		}
		
		private void detach_Cars(Cars entity)
		{
			this.SendPropertyChanging();
			entity.Colors = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Malfunctions")]
	public partial class Malfunctions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Malfunction;
		
		private EntitySet<BrakeFacts> _BrakeFacts;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMalfunctionChanging(string value);
    partial void OnMalfunctionChanged();
    #endregion
		
		public Malfunctions()
		{
			this._BrakeFacts = new EntitySet<BrakeFacts>(new Action<BrakeFacts>(this.attach_BrakeFacts), new Action<BrakeFacts>(this.detach_BrakeFacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Malfunction", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Malfunction
		{
			get
			{
				return this._Malfunction;
			}
			set
			{
				if ((this._Malfunction != value))
				{
					this.OnMalfunctionChanging(value);
					this.SendPropertyChanging();
					this._Malfunction = value;
					this.SendPropertyChanged("Malfunction");
					this.OnMalfunctionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Malfunctions_BrakeFacts", Storage="_BrakeFacts", ThisKey="Id", OtherKey="IdMalfunction")]
		public EntitySet<BrakeFacts> BrakeFacts
		{
			get
			{
				return this._BrakeFacts;
			}
			set
			{
				this._BrakeFacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BrakeFacts(BrakeFacts entity)
		{
			this.SendPropertyChanging();
			entity.Malfunctions = this;
		}
		
		private void detach_BrakeFacts(BrakeFacts entity)
		{
			this.SendPropertyChanging();
			entity.Malfunctions = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Persons")]
	public partial class Persons : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Passport;
		
		private string _Surname;
		
		private string _Name;
		
		private string _Patronymic;
		
		private EntitySet<Workers> _Workers;
		
		private EntitySet<Clients> _Clients;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPassportChanging(string value);
    partial void OnPassportChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPatronymicChanging(string value);
    partial void OnPatronymicChanged();
    #endregion
		
		public Persons()
		{
			this._Workers = new EntitySet<Workers>(new Action<Workers>(this.attach_Workers), new Action<Workers>(this.detach_Workers));
			this._Clients = new EntitySet<Clients>(new Action<Clients>(this.attach_Clients), new Action<Clients>(this.detach_Clients));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Passport", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string Passport
		{
			get
			{
				return this._Passport;
			}
			set
			{
				if ((this._Passport != value))
				{
					this.OnPassportChanging(value);
					this.SendPropertyChanging();
					this._Passport = value;
					this.SendPropertyChanged("Passport");
					this.OnPassportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patronymic", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string Patronymic
		{
			get
			{
				return this._Patronymic;
			}
			set
			{
				if ((this._Patronymic != value))
				{
					this.OnPatronymicChanging(value);
					this.SendPropertyChanging();
					this._Patronymic = value;
					this.SendPropertyChanged("Patronymic");
					this.OnPatronymicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Persons_Workers", Storage="_Workers", ThisKey="Id", OtherKey="IdPerson")]
		public EntitySet<Workers> Workers
		{
			get
			{
				return this._Workers;
			}
			set
			{
				this._Workers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Persons_Clients", Storage="_Clients", ThisKey="Id", OtherKey="IdPerson")]
		public EntitySet<Clients> Clients
		{
			get
			{
				return this._Clients;
			}
			set
			{
				this._Clients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Workers(Workers entity)
		{
			this.SendPropertyChanging();
			entity.Persons = this;
		}
		
		private void detach_Workers(Workers entity)
		{
			this.SendPropertyChanging();
			entity.Persons = null;
		}
		
		private void attach_Clients(Clients entity)
		{
			this.SendPropertyChanging();
			entity.Persons = this;
		}
		
		private void detach_Clients(Clients entity)
		{
			this.SendPropertyChanging();
			entity.Persons = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RepairFacts")]
	public partial class RepairFacts : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdCar;
		
		private int _IdClient;
		
		private System.DateTime _DateStart;
		
		private System.DateTime _DateFinish;
		
		private EntitySet<BrakeFacts> _BrakeFacts;
		
		private EntityRef<Cars> _Cars;
		
		private EntityRef<Clients> _Clients;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdCarChanging(int value);
    partial void OnIdCarChanged();
    partial void OnIdClientChanging(int value);
    partial void OnIdClientChanged();
    partial void OnDateStartChanging(System.DateTime value);
    partial void OnDateStartChanged();
    partial void OnDateFinishChanging(System.DateTime value);
    partial void OnDateFinishChanged();
    #endregion
		
		public RepairFacts()
		{
			this._BrakeFacts = new EntitySet<BrakeFacts>(new Action<BrakeFacts>(this.attach_BrakeFacts), new Action<BrakeFacts>(this.detach_BrakeFacts));
			this._Cars = default(EntityRef<Cars>);
			this._Clients = default(EntityRef<Clients>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCar", DbType="Int NOT NULL")]
		public int IdCar
		{
			get
			{
				return this._IdCar;
			}
			set
			{
				if ((this._IdCar != value))
				{
					if (this._Cars.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCarChanging(value);
					this.SendPropertyChanging();
					this._IdCar = value;
					this.SendPropertyChanged("IdCar");
					this.OnIdCarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdClient", DbType="Int NOT NULL")]
		public int IdClient
		{
			get
			{
				return this._IdClient;
			}
			set
			{
				if ((this._IdClient != value))
				{
					if (this._Clients.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdClientChanging(value);
					this.SendPropertyChanging();
					this._IdClient = value;
					this.SendPropertyChanged("IdClient");
					this.OnIdClientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateStart", DbType="Date NOT NULL")]
		public System.DateTime DateStart
		{
			get
			{
				return this._DateStart;
			}
			set
			{
				if ((this._DateStart != value))
				{
					this.OnDateStartChanging(value);
					this.SendPropertyChanging();
					this._DateStart = value;
					this.SendPropertyChanged("DateStart");
					this.OnDateStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateFinish", DbType="Date NOT NULL")]
		public System.DateTime DateFinish
		{
			get
			{
				return this._DateFinish;
			}
			set
			{
				if ((this._DateFinish != value))
				{
					this.OnDateFinishChanging(value);
					this.SendPropertyChanging();
					this._DateFinish = value;
					this.SendPropertyChanged("DateFinish");
					this.OnDateFinishChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RepairFacts_BrakeFacts", Storage="_BrakeFacts", ThisKey="Id", OtherKey="IdRepairFact")]
		public EntitySet<BrakeFacts> BrakeFacts
		{
			get
			{
				return this._BrakeFacts;
			}
			set
			{
				this._BrakeFacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cars_RepairFacts", Storage="_Cars", ThisKey="IdCar", OtherKey="Id", IsForeignKey=true)]
		public Cars Cars
		{
			get
			{
				return this._Cars.Entity;
			}
			set
			{
				Cars previousValue = this._Cars.Entity;
				if (((previousValue != value) 
							|| (this._Cars.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cars.Entity = null;
						previousValue.RepairFacts.Remove(this);
					}
					this._Cars.Entity = value;
					if ((value != null))
					{
						value.RepairFacts.Add(this);
						this._IdCar = value.Id;
					}
					else
					{
						this._IdCar = default(int);
					}
					this.SendPropertyChanged("Cars");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Clients_RepairFacts", Storage="_Clients", ThisKey="IdClient", OtherKey="Id", IsForeignKey=true)]
		public Clients Clients
		{
			get
			{
				return this._Clients.Entity;
			}
			set
			{
				Clients previousValue = this._Clients.Entity;
				if (((previousValue != value) 
							|| (this._Clients.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Clients.Entity = null;
						previousValue.RepairFacts.Remove(this);
					}
					this._Clients.Entity = value;
					if ((value != null))
					{
						value.RepairFacts.Add(this);
						this._IdClient = value.Id;
					}
					else
					{
						this._IdClient = default(int);
					}
					this.SendPropertyChanged("Clients");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BrakeFacts(BrakeFacts entity)
		{
			this.SendPropertyChanging();
			entity.RepairFacts = this;
		}
		
		private void detach_BrakeFacts(BrakeFacts entity)
		{
			this.SendPropertyChanging();
			entity.RepairFacts = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Services")]
	public partial class Services : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Service;
		
		private int _WorkCost;
		
		private int _SparePartsCost;
		
		private EntitySet<BrakeFacts> _BrakeFacts;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnServiceChanging(string value);
    partial void OnServiceChanged();
    partial void OnWorkCostChanging(int value);
    partial void OnWorkCostChanged();
    partial void OnSparePartsCostChanging(int value);
    partial void OnSparePartsCostChanged();
    #endregion
		
		public Services()
		{
			this._BrakeFacts = new EntitySet<BrakeFacts>(new Action<BrakeFacts>(this.attach_BrakeFacts), new Action<BrakeFacts>(this.detach_BrakeFacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Service", DbType="NVarChar(80) NOT NULL", CanBeNull=false)]
		public string Service
		{
			get
			{
				return this._Service;
			}
			set
			{
				if ((this._Service != value))
				{
					this.OnServiceChanging(value);
					this.SendPropertyChanging();
					this._Service = value;
					this.SendPropertyChanged("Service");
					this.OnServiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkCost", DbType="Int NOT NULL")]
		public int WorkCost
		{
			get
			{
				return this._WorkCost;
			}
			set
			{
				if ((this._WorkCost != value))
				{
					this.OnWorkCostChanging(value);
					this.SendPropertyChanging();
					this._WorkCost = value;
					this.SendPropertyChanged("WorkCost");
					this.OnWorkCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SparePartsCost", DbType="Int NOT NULL")]
		public int SparePartsCost
		{
			get
			{
				return this._SparePartsCost;
			}
			set
			{
				if ((this._SparePartsCost != value))
				{
					this.OnSparePartsCostChanging(value);
					this.SendPropertyChanging();
					this._SparePartsCost = value;
					this.SendPropertyChanged("SparePartsCost");
					this.OnSparePartsCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Services_BrakeFacts", Storage="_BrakeFacts", ThisKey="Id", OtherKey="IdService")]
		public EntitySet<BrakeFacts> BrakeFacts
		{
			get
			{
				return this._BrakeFacts;
			}
			set
			{
				this._BrakeFacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BrakeFacts(BrakeFacts entity)
		{
			this.SendPropertyChanging();
			entity.Services = this;
		}
		
		private void detach_BrakeFacts(BrakeFacts entity)
		{
			this.SendPropertyChanging();
			entity.Services = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Specialties")]
	public partial class Specialties : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Speciality;
		
		private EntitySet<Workers> _Workers;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSpecialityChanging(string value);
    partial void OnSpecialityChanged();
    #endregion
		
		public Specialties()
		{
			this._Workers = new EntitySet<Workers>(new Action<Workers>(this.attach_Workers), new Action<Workers>(this.detach_Workers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Speciality", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		public string Speciality
		{
			get
			{
				return this._Speciality;
			}
			set
			{
				if ((this._Speciality != value))
				{
					this.OnSpecialityChanging(value);
					this.SendPropertyChanging();
					this._Speciality = value;
					this.SendPropertyChanged("Speciality");
					this.OnSpecialityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Specialties_Workers", Storage="_Workers", ThisKey="Id", OtherKey="IdSpecialty")]
		public EntitySet<Workers> Workers
		{
			get
			{
				return this._Workers;
			}
			set
			{
				this._Workers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Workers(Workers entity)
		{
			this.SendPropertyChanging();
			entity.Specialties = this;
		}
		
		private void detach_Workers(Workers entity)
		{
			this.SendPropertyChanging();
			entity.Specialties = null;
		}
	}
}
#pragma warning restore 1591
